apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

ext.versionMajor = 0
ext.versionMinor = 1
ext.versionPatch = 0

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.arctouch.test"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode computeVersionCode()
        versionName computeVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    kapt "com.android.databinding:compiler:$kotlin_data_binding_version"

    // Android Support
    implementation "com.android.support:appcompat-v7:$android_support_verion"
    implementation "com.android.support:recyclerview-v7:$android_support_verion"

    // Fresco Lib
    implementation "com.facebook.fresco:fresco:$fresco_version"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$rx_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"

    // DI
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_extensions_version"

    // Test dependencies
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.powermock:powermock-module-junit4:$power_mockito"
    testImplementation "org.powermock:powermock-api-mockito2:$power_mockito"
    testImplementation "android.arch.core:core-testing:$lifecycle_extensions_version"
}

@SuppressWarnings("GrMethodMayBeStatic")
def computeVersionName() {
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}

@SuppressWarnings("GrMethodMayBeStatic")
def computeVersionCode() {
    return (versionMajor * 1_000_000) + (versionMinor * 1_000) + versionPatch
}
